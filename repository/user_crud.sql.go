// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: user_crud.sql

package repository

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO "user" (
    "email", "user_name", "hashed_password"
) VALUES (
    $1, $2, $3
)
`

type CreateUserParams struct {
	Email          string
	UserName       string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Email, arg.UserName, arg.HashedPassword)
	return err
}

const getAllAddress = `-- name: GetAllAddress :many
SELECT id, user_id, address, note, created_at, updated_at FROM "user_address"
WHERE "user_id" = $1
`

func (q *Queries) GetAllAddress(ctx context.Context, userID int64) ([]UserAddress, error) {
	rows, err := q.db.QueryContext(ctx, getAllAddress, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserAddress
	for rows.Next() {
		var i UserAddress
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Address,
			&i.Note,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUser = `-- name: GetAllUser :many
SELECT id, email, user_name, role, active_status, hashed_password, password_updated_at, created_at, gender, phone, name, address, note FROM "user"
`

func (q *Queries) GetAllUser(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.UserName,
			&i.Role,
			&i.ActiveStatus,
			&i.HashedPassword,
			&i.PasswordUpdatedAt,
			&i.CreatedAt,
			&i.Gender,
			&i.Phone,
			&i.Name,
			&i.Address,
			&i.Note,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPhone = `-- name: GetPhone :one
SELECT id, user_id, phone, avatar, created_at, updated_at FROM "user_profile"
WHERE "user_id" = $1
`

func (q *Queries) GetPhone(ctx context.Context, userID int64) (UserProfile, error) {
	row := q.db.QueryRowContext(ctx, getPhone, userID)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Phone,
		&i.Avatar,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, user_name, role, active_status, hashed_password, password_updated_at, created_at, gender, phone, name, address, note FROM "user" WHERE email = $1  LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.UserName,
		&i.Role,
		&i.ActiveStatus,
		&i.HashedPassword,
		&i.PasswordUpdatedAt,
		&i.CreatedAt,
		&i.Gender,
		&i.Phone,
		&i.Name,
		&i.Address,
		&i.Note,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, user_name, role, active_status, hashed_password, password_updated_at, created_at, gender, phone, name, address, note FROM "user"
WHERE "user".id = $1  LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.UserName,
		&i.Role,
		&i.ActiveStatus,
		&i.HashedPassword,
		&i.PasswordUpdatedAt,
		&i.CreatedAt,
		&i.Gender,
		&i.Phone,
		&i.Name,
		&i.Address,
		&i.Note,
	)
	return i, err
}

const registerSupplier = `-- name: RegisterSupplier :exec
UPDATE "user" SET "role" = 'supplier' WHERE "id" = $1
`

func (q *Queries) RegisterSupplier(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, registerSupplier, id)
	return err
}

const updateUserName = `-- name: UpdateUserName :exec
UPDATE "user"
SET "user_name" = $1,
"phone" = $2,
"address" = $4,
"note" = $5
WHERE "id" = $3
`

type UpdateUserNameParams struct {
	UserName string
	Phone    sql.NullString
	ID       int64
	Address  sql.NullString
	Note     sql.NullString
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) error {
	_, err := q.db.ExecContext(ctx, updateUserName,
		arg.UserName,
		arg.Phone,
		arg.ID,
		arg.Address,
		arg.Note,
	)
	return err
}
